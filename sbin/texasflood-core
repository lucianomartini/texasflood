#!/bin/bash
#TexasFlood Luciano Andress Martini (c) 2005-2016
#Version: 15664866231
#This software is under GPLv2 license. 
#Free for use, study, or modify. 
#Enable debug:
#set -x

#DESCRIPTION: 
#Texas Flood is a extremely simple script, with extremely big results in practice.
#It just starts services in parallel, and for home computers (if server mode disabled), it start some services, only at end
#of the whole boot in sequential, giving at end a extremely fast boot experience. 
#For servers (server =1) it is the opposite, running in a more standard way, not trying to do things, that is not very important
#in that environments. 
#Read /etc/texasflood.conf and /etc/texasflood.list for knowing more about the potentials, maybe not visible at a first look
#to this code. 

#The dependecies are configured by the services names. S01, S01, will be loaded first in parallel, then the S02s, S03s, etc. 

#This file must replace rc in inittab, or linked to rc path. 

#This code was writed a long time ago, please don't laugh, believe me it works, and it is faster in practice.
#If you have suggestions please improve it. 


export PATH="$PATH:/sbin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
source /etc/texasflood.conf
source /usr/lib/777User-texasflood.shlib
shopt -s extglob
set -a

printf "${BLUE}"

if [ "$1" == "S" ]; then
        clear
	echo "TexasFlood - (c) 2005-2016 Luciano Andress Martini "
        echo "Release code: 15664866231" 
        echo
fi 


mount -o remount,rw none /
export RUNLEVEL=$(runlevel | cut -d' ' -f2)

#FIXME
#ifconfig are not widely used anymore... 
ifconfig lo 127.0.0.1 up 

#FIXME: are the distros still supporting this? 
cd /etc/rc${1}.d/ 
#echo >/var/log/texasflood.services


txservice(){
       case $1 in 
       		S*) 
                  $PWD/$1 start  &>>/var/log/texasflood.services
                ;;
       		K*) 
                  $PWD/$1 stop  &>/dev/null
                ;;
                *)
                  $PWD/$w start &>>/var/log/texasflood.services
                ;;
       esac
}

txrc(){
#FIXME IFS= while -r read i isnt? -- please fix me, variable name is ugly ($i)
ls --ignore=README | cut -c2,3 | uniq | while read i; do
       [ "$i" -lt "10" ] && v="0$i" || v="$i"
       for f in ?"${i}"*; do
           [ "$server" = "0" ] && case $f in $lazy_services) continue ;; esac
           echo -n "$f "
   	   txservice $f &
       done 
      wait 
done
}



echo "Texas Flood RC -> Reading Runlevel $1 in Parallel"

echo -n "Found: "
txrc $1 
        

printf ${NORMAL}
echo
echo


case $1 in 
S) 	
       echo "Starting Texas Flood Helpers..."
       echo "Loading Texas Flood Process Balancer. "  
        /sbin/texasflood-ctlb&
       if [ "$nightmare" = "1" ]; then 
       	echo "Loading Texas Flood Nightmare, Powered by Hoytech Vmtouch ..." 
       	/sbin/texasflood-nightmare
       fi
       echo 
;;

1|2|3|4|5)
       echo "Waiting for ${wait_process} until ${wait_limit} seconds..."
       [ "$server" = "0" ] && wait_for ${wait_process} ${wait_limit}
       echo 

       printf ${BLUE}
       echo "Running Additional Lazy Services..."
       for p in /etc/rcS.d/*; do
             lazy=$(file $p | rev | cut -d' ' -f1 | rev)
             [ "$server" = "0" ] && case $lazy in $lazy_services) nice -n ${lazy_level} $lazy start ;; esac
       done
       for p in /etc/rc${1}.d/*; do
             lazy=$(file $p | rev | cut -d' ' -f1 | rev)
             [ "$server" = "0" ] && case $lazy in $lazy_services) nice -n ${lazy_level} $lazy start ;; esac
       done
;;

esac


