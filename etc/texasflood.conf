#The texas flood boot system configuration. 
#(c) 2005-2019 Texas Flood by Luciano A. Martini

#Welcome !!! 
#This file is divided in sessions. 
#If you are running a server texas flood, offer: auto-maintenance of your services, auto-alert emails and a lot of great and funny tools, 
#like the disastred users protection and backdoor web server protection +plus this with the EXPERIMENTAL Real time priority control for services.
#At home you can have the lazy_services manipulation(this is disabled in server mode), that can increase much more your boot speed without disabling any of your services.
#In texasflood.list you can manipulate your web browser or favorite game to run faster than other apps, and more.

#
#Part 1: Texas Flood Graphical Interface Boot Speed Calibration (for home/office use only)
#
#Caution: When you enable server mode, the options in Part 1 will be ignored. 

#Type here the services that you want to be loaded only before the system is ready, separated by pipe*, or a plus * at the end of service name to search service.  
lazy_services="+(*atd|*rmnologin|*bootlogs|*rpcbind|*cups|*apache2|*motd|*cron|*anacron|*networking|*exim4|*pppd-dns|*hwclock.sh|*keyboard-setup|*alsa-utils|*urandom|*console-setup|*nfs*|*avahi*|*alsa-utils|*saned|*openvpn|*rc.local|*udev-finish)"

#The one processe texasflood will use to understand that the boot completes, for example, kmix, plasma, kicker, mate-desktop, or the best for you. 
#When this processes finishes the lazy services will be called one by one
wait_process="yakuake" 

#If the wait_process fail, texas flood will call the lazy_services forced in 45 seconds: 
wait_limit=30

#The low priority for the lazy services, a big number <20 will result in a slow running speed of this services, bigger numbers here is good for home use.
#remember server mode will ignore this configurations
lazy_level="10"


#
#Part 2: Tunning
#

#Balance the services priorities according to the list on /etc/texasflood.list. This is great for experimental servers and stable home use: 
balance=1 

#Enable libraries boot acceleration. It is pre-configured for KDE, you need to configure it for your system editing /etc/texasflood.nightmare
#If you dont know how to pre-load the right system files, leave it as 0, in a database server put the database files on /etc/texasflood.nightmare
#To get this working you need hoytech vmtouch installed on your system.
nightmare=0	


#
#Part 3: Server - Not ready in portable version 
#

#Change to 1, if you are running a server. The lazy_processes behavior will be ignored, and the nice servers
#configurations in this session will start to work...
server=0

#Auto maintenance the services, according to the maintenance rules:
automaintenance=0 

#Syntax: theport>thecommand_or_script_to_fix_it;
#I putted some examples for you, so if you enable the autorestart variable you will be happy =0) 
#If you blank the variable this function will be disabled.
mnt_port_rules="
5432>/etc/init.d/postgresql restart;
443>/etc/init.d/apache2 restart;
80>/etc/init.d/apache2 restart;
22>/etc/init.d/ssh restart;
"

#Time in seconds beetwen a test and other (please do not use less than 30 seconds) 
try_interval=45 

#If automaintenance is enabled you can run this command when the disk is full 
when_disk_is_full_run="rm /var/log/stupidbiglognotrotating"


#Email!   
#And if your server send a mail for you when something just crashes?
#That's looks fine, 0 for disable, 1 for enable: 
email=0
smtp_service="smtp.yourgreat_emailservice.com.br"
smtp_user="yourgreatserveremailusername"
smtp_pass="yourpass"
smtp_title="Everything crashed here $(</etc/hostname)."

#Check if this ports are closed (| separated), if it is, send me a mail: 
email_check_ports="80|443"

#Email check processes (please, the real processes name in ps) (separated by pipe)
email_check_processes="apache2|postgresql"

#Bad Uploads protection  (server=1 and email=1 required!)
#If you are running on a web server, maybe you want to check if someone is trying to upload something that you dont like, like a backdoor
#baduploads="php|jar|exe|bin|html|htm"
#baduploadsfolder="/var/www/mywebsite/uploads/"


#
#Part 4 Accidents protection
#

#This will simply disable rm until you run a chmod +x on it. It will be disabled again in 1 minute ;-)
#Note: The running instances will still run. 
#I know it is simple, but maybe you want it! 
disastred_rm_user=0

#Filesystem protection (accidents) (chattr +i) 
#The files on this folder will be unmutable even if you are root
#This is bad if someone wants to write in the folder, so do not use in database folders. 
#If you type nothing this service is disabled. 
#The folders are space separated, so composed folder names will need \ in spaces. 
protect_folder="/etc/myservice"

